package view.components;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.shape.Circle;
import javafx.scene.Node;
import view.BaseScreenView;

/**
 * M√†n h√¨nh qu·∫£n l√Ω ph√≤ng h·ªçc
 */
public class RoomView extends BaseScreenView {

    // C√°c th√†nh ph·∫ßn UI
    private TextField txtKeyword;
    private ComboBox<String> cmbStatus;
    private ComboBox<String> cmbPageSize;
    private TableView<PhongHoc> tblPhongHoc;
    private FilteredList<PhongHoc> filteredData;

    public RoomView() {
        super("Ph√≤ng h·ªçc", "classrooms");
    }

    @Override
    public void initializeView() {
        // T·∫°o layout ch√≠nh v·ªõi padding
        root.setSpacing(10);
        root.setPadding(new Insets(20));

        // T·∫°o ti√™u ƒë·ªÅ m√†n h√¨nh
        Label lblTitle = new Label("Ph√≤ng h·ªçc");
        lblTitle.setFont(Font.font("System", FontWeight.BOLD, 24));
        lblTitle.setTextFill(Color.web("#1E88E5"));

        // T·∫°o v√πng t√¨m ki·∫øm v√† l·ªçc
        HBox searchBar = createSearchBar();
        searchBar.setPadding(new Insets(10));
        searchBar.setStyle("-fx-background-color: #f8f9fa; -fx-border-radius: 5; -fx-background-radius: 5;");

        // T·∫°o b·∫£ng hi·ªÉn th·ªã danh s√°ch ph√≤ng h·ªçc
        createTableView();

        // Th√™m t·∫•t c·∫£ v√†o layout ch√≠nh
        root.getChildren().addAll(lblTitle, searchBar, tblPhongHoc);
        VBox.setVgrow(tblPhongHoc, Priority.ALWAYS);

        // N·∫°p d·ªØ li·ªáu m·∫´u v√†o b·∫£ng
        loadSampleData();
    }

    private HBox createSearchBar() {
        HBox searchBar = new HBox(15);
        searchBar.setAlignment(Pos.CENTER_LEFT);

        // Tr∆∞·ªùng t·ª´ kh√≥a
        Label lblKeyword = new Label("T·ª´ kh√≥a:");
        lblKeyword.setMinWidth(70);
        lblKeyword.setTextFill(Color.BLACK);
        txtKeyword = new TextField();
        txtKeyword.setPromptText("T·ª´ kh√≥a");
        txtKeyword.setPrefWidth(350);

        // Combo box tr·∫°ng th√°i
        Label lblStatus = new Label("Tr·∫°ng th√°i:");
        lblStatus.setTextFill(Color.BLACK);
        cmbStatus = new ComboBox<>();
        cmbStatus.setPromptText("Ch·ªçn");
        cmbStatus.setItems(FXCollections.observableArrayList("T·∫•t c·∫£", "ƒêang s·ª≠ d·ª•ng", "B·∫£o tr√¨", "Kh√¥ng s·ª≠ d·ª•ng"));
        cmbStatus.setPrefWidth(200);

        // Combo box k√≠ch th∆∞·ªõc trang
        Label lblPageSize = new Label("C·ª° trang:");
        lblPageSize.setTextFill(Color.BLACK);
        cmbPageSize = new ComboBox<>();
        cmbPageSize.setItems(FXCollections.observableArrayList("10", "20", "50", "100"));
        cmbPageSize.setValue("20");
        cmbPageSize.setPrefWidth(120);

        // N√∫t t√¨m ki·∫øm v·ªõi bi·ªÉu t∆∞·ª£ng t√¨m ki·∫øm ƒë∆°n gi·∫£n
        Button btnSearch = new Button();
        Text searchIcon = new Text("üîç"); // Unicode magnifying glass
        searchIcon.setFill(Color.WHITE);
        btnSearch.setGraphic(searchIcon);
        btnSearch.setStyle("-fx-background-color: #1E88E5; -fx-text-fill: white;");
        btnSearch.setPrefSize(40, 10);

        // Th√™m s·ª± ki·ªán t√¨m ki·∫øm
        btnSearch.setOnAction(e -> performSearch());
        txtKeyword.setOnAction(e -> performSearch());

        // Th√™m kho·∫£ng tr·ªëng linh ho·∫°t tr∆∞·ªõc n√∫t t√¨m ki·∫øm
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        searchBar.getChildren().addAll(lblKeyword, txtKeyword, lblStatus, cmbStatus, lblPageSize, cmbPageSize, spacer, btnSearch);
        return searchBar;
    }

    private void createTableView() {
        tblPhongHoc = new TableView<>();
        tblPhongHoc.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        // C·ªôt STT
        TableColumn<PhongHoc, Integer> colSTT = new TableColumn<>("STT");
        colSTT.setCellValueFactory(new PropertyValueFactory<>("stt"));
        colSTT.setMaxWidth(70);
        colSTT.setMinWidth(50);
        colSTT.setSortable(false);

        // C·ªôt M√£
        TableColumn<PhongHoc, String> colMa = new TableColumn<>("M√£");
        colMa.setCellValueFactory(new PropertyValueFactory<>("ma"));
        colMa.setMaxWidth(100);
        colMa.setMinWidth(80);

        // C·ªôt T√™n
        TableColumn<PhongHoc, String> colTen = new TableColumn<>("T√™n");
        colTen.setCellValueFactory(new PropertyValueFactory<>("ten"));

        // C·ªôt T·∫ßng
        TableColumn<PhongHoc, Integer> colTang = new TableColumn<>("T·∫ßng");
        colTang.setCellValueFactory(new PropertyValueFactory<>("tang"));
        colTang.setMaxWidth(100);
        colTang.setMinWidth(80);

        // C·ªôt S·ª©c ch·ª©a
        TableColumn<PhongHoc, Integer> colSucChua = new TableColumn<>("S·ª©c ch·ª©a");
        colSucChua.setCellValueFactory(new PropertyValueFactory<>("sucChua"));
        colSucChua.setMaxWidth(100);
        colSucChua.setMinWidth(80);

        // C·ªôt Tr·∫°ng th√°i
        TableColumn<PhongHoc, String> colTrangThai = new TableColumn<>("Tr·∫°ng th√°i");
        colTrangThai.setCellValueFactory(cellData -> {
            return new SimpleStringProperty("S·ª≠ d·ª•ng");
        });
        colTrangThai.setMaxWidth(150);
        colTrangThai.setMinWidth(120);

        // C√†i ƒë·∫∑t cell factory cho c·ªôt tr·∫°ng th√°i ƒë·ªÉ hi·ªÉn th·ªã n√∫t
        colTrangThai.setCellFactory(column -> {
            return new TableCell<>() {
                final Button button = new Button("S·ª≠ d·ª•ng");

                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);

                    if (empty) {
                        setGraphic(null);
                    } else {
                        button.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 20;");
                        button.setPrefWidth(100);
                        setGraphic(button);
                    }
                }
            };
        });

        // C·ªôt Chi ti·∫øt
        TableColumn<PhongHoc, Void> colChiTiet = new TableColumn<>("Chi ti·∫øt");
        colChiTiet.setCellFactory(column -> {
            return new TableCell<>() {
                final Button button = new Button();

                {
                    // T·∫°o bi·ªÉu t∆∞·ª£ng "eye" ƒë∆°n gi·∫£n
                    HBox eyeIcon = createEyeIcon();
                    button.setGraphic(eyeIcon);
                    button.setStyle("-fx-background-color: transparent;");

                    button.setOnAction(event -> {
                        PhongHoc data = getTableView().getItems().get(getIndex());
                        showDetails(data);
                    });
                }

                @Override
                protected void updateItem(Void item, boolean empty) {
                    super.updateItem(item, empty);
                    setGraphic(empty ? null : button);
                }
            };
        });
        colChiTiet.setMaxWidth(80);
        colChiTiet.setMinWidth(80);
        colChiTiet.setSortable(false);

        // Th√™m c√°c c·ªôt v√†o b·∫£ng
        tblPhongHoc.getColumns().addAll(colSTT, colMa, colTen, colTang, colSucChua, colTrangThai, colChiTiet);
    }

    /**
     * T·∫°o bi·ªÉu t∆∞·ª£ng con m·∫Øt ƒë∆°n gi·∫£n thay th·∫ø cho FontAwesome
     */
    private HBox createEyeIcon() {
        HBox container = new HBox();
        container.setAlignment(Pos.CENTER);

        // T·∫°o h√¨nh tr√≤n ngo√†i
        Circle outerCircle = new Circle(9, Color.web("#2E7D32"));
        outerCircle.setStroke(Color.web("#2E7D32"));
        outerCircle.setStrokeWidth(1.5);
        outerCircle.setFill(Color.TRANSPARENT);

        // T·∫°o h√¨nh tr√≤n trong (ƒë·ªìng t·ª≠)
        Circle innerCircle = new Circle(3, Color.web("#2E7D32"));

        // X·∫øp ch·ªìng c√°c h√¨nh l√™n nhau
        container.getChildren().addAll(outerCircle, innerCircle);

        return container;
    }

    private void loadSampleData() {
        // T·∫°o d·ªØ li·ªáu m·∫´u
        ObservableList<PhongHoc> data = FXCollections.observableArrayList(
                new PhongHoc(1, "101", "Ph√≤ng sinh ho·∫°t", 1, 7),
                new PhongHoc(2, "201", "Ph√≤ng 201", 2, 25),
                new PhongHoc(3, "202", "Ph√≤ng 202", 2, 30),
                new PhongHoc(4, "301", "Ph√≤ng 301", 3, 27),
                new PhongHoc(5, "302", "Ph√≤ng 302", 3, 30),
                new PhongHoc(6, "401", "Ph√≤ng 401", 4, 25),
                new PhongHoc(7, "402", "Ph√≤ng 402", 4, 30)
        );

        // T·∫°o filtered list ƒë·ªÉ t√¨m ki·∫øm
        filteredData = new FilteredList<>(data, p -> true);
        tblPhongHoc.setItems(filteredData);
    }

    private void performSearch() {
        String keyword = txtKeyword.getText().toLowerCase();
        String status = cmbStatus.getValue();

        filteredData.setPredicate(phongHoc -> {
            // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a ho·∫∑c tr·∫°ng th√°i th√¨ hi·ªán t·∫•t c·∫£
            if (keyword == null || keyword.isEmpty()) {
                return true;
            }

            // L·ªçc theo t·ª´ kh√≥a
            if (phongHoc.getMa().toLowerCase().contains(keyword) ||
                    phongHoc.getTen().toLowerCase().contains(keyword) ||
                    String.valueOf(phongHoc.getTang()).contains(keyword)) {
                return true;
            }

            return false;
        });
    }

    private void showDetails(PhongHoc phongHoc) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Chi ti·∫øt ph√≤ng h·ªçc");
        alert.setHeaderText("Th√¥ng tin ph√≤ng h·ªçc: " + phongHoc.getTen());

        String content = "M√£ ph√≤ng: " + phongHoc.getMa() + "\n" +
                "T√™n ph√≤ng: " + phongHoc.getTen() + "\n" +
                "T·∫ßng: " + phongHoc.getTang() + "\n" +
                "S·ª©c ch·ª©a: " + phongHoc.getSucChua() + " ng∆∞·ªùi";

        alert.setContentText(content);
        alert.showAndWait();
    }

    @Override
    public void refreshView() {
        // L√†m m·ªõi d·ªØ li·ªáu khi c·∫ßn
        // loadData();
    }

    @Override
    public boolean requiresAuthentication() {
        // Y√™u c·∫ßu x√°c th·ª±c ƒë·ªÉ truy c·∫≠p m√†n h√¨nh n√†y
        return true;
    }

    /**
     * L·ªõp ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu Ph√≤ng h·ªçc
     */
    public static class PhongHoc {
        private final int stt;
        private final String ma;
        private final String ten;
        private final int tang;
        private final int sucChua;

        public PhongHoc(int stt, String ma, String ten, int tang, int sucChua) {
            this.stt = stt;
            this.ma = ma;
            this.ten = ten;
            this.tang = tang;
            this.sucChua = sucChua;
        }

        public int getStt() { return stt; }
        public String getMa() { return ma; }
        public String getTen() { return ten; }
        public int getTang() { return tang; }
        public int getSucChua() { return sucChua; }
    }
}
